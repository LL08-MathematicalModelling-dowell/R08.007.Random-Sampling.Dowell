import { useState, useRef, useEffect } from "react";
import React from "react";

import { TransformWrapper, TransformComponent } from "react-zoom-pan-pinch";

// Usage example

// const generatedPoints =[[1, 11], [2, 12], [3, -13], [-4, 14],  [5, 15], [6, 16], [7, 17], [8, 18], [9, 19], [10, 20], [12, 22], [22, 55], [55, 64], [64, 77], [77, 88], [88, 99], [99, 110], [110, 121], [121, 132], [132, 143], [143, 154], [154, 165], [165, 176], [176, 187], [187, 198], [198, 209], [209, 220], [220, 231], [231, 242], [242, 253], [253, 264], [264, 275], [275, 286], [286, 297], [297, 308], [308, 319], [319, 330], [330, 341], [341, 352], [352, 363], [363, 374], [374, 385], [385, 396], [396, 407], [407, 418], [418, 429], [429, 440], [440, 451], [451, 462], [462, 473], [473, 484], [484, 495], [495, 506], [506, 517], [517, 528], [528, 539], [539, 550], [550, 561], [561, 572], [572, 583], [583, 594], [594, 605], [605, 616], [616, 627], [627, 638], [638, 649], [649, 660], [660, 671], [671, 682], [682, 693], [693, 704], [704, 715], [715, 726], [726, 737], [737, 748], [748, 759], [759, 770], [770, 781], [781, 792], [792, 803], [803, 814], [814, 825], [825, 836], [836, 847], [847, 858], [858, 869], [869, 880], [880, 891], [891, 902], [902, 913], [913, 924], [924, 935], [935, 946], [946, 957], [957, 968], [968, 979], [979, 990],[1, 11], [2, 12], [3, 13], [4, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19], [10, 20], [12, 22], [22, 55], [55, 64], [64, 77], [77, 88], [88, 99], [99, 110], [110, 121], [121, 132], [132, 143], [143, 154], [154, 165], [165, 176], [176, 187], [187, 198], [198, 209], [209, 220], [220, 231], [231, 242], [242, 253], [253, 264], [264, 275], [275, 286], [286, 297], [297, 308], [308, 319], [319, 330], [330, 341], [341, 352], [352, 363], [363, 374], [374, 385], [385, 396], [396, 407], [407, 418], [418, 429], [429, 440], [440, 451], [451, 462], [462, 473], [473, 484], [484, 495], [495, 506], [506, 517], [517, 528], [528, 539], [539, 550], [550, 561], [561, 572], [572, 583], [583, 594], [594, 605], [605, 616], [616, 627], [627, 638], [638, 649], [649, 660], [660, 671], [671, 682], [682, 693], [693, 704], [704, 715], [715, 726], [726, 737], [737, 748], [748, 759], [759, 770], [770, 781], [781, 792], [792, 803], [803, 814], [814, 825], [825, 836], [836, 847], [847, 858], [858, 869], [869, 880], [880, 891], [891, 902], [902, 913], [913, 924], [924, 935], [935, 946], [946, 957], [957, 968], [968, 979], [979, 990],[1, 11], [2, 12], [3, 13], [4, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19], [10, 20], [12, 22], [22, 55], [55, 64], [64, 77], [77, 88], [88, 99], [99, 110], [110, 121], [121, 132], [132, 143], [143, 154], [154, 165], [165, 176], [176, 187], [187, 198], [198, 209], [209, 220], [220, 231], [231, 242], [242, 253], [253, 264], [264, 275], [275, 286], [286, 297], [297, 308], [308, 319], [319, 330], [330, 341], [341, 352], [352, 363], [363, 374], [374, 385], [385, 396], [396, 407], [407, 418], [418, 429], [429, 440], [440, 451], [451, 462], [462, 473], [473, 484], [484, 495], [495, 506], [506, 517], [517, 528], [528, 539], [539, 550], [550, 561], [561, 572], [572, 583], [583, 594], [594, 605], [605, 616], [616, 627], [627, 638], [638, 649], [649, 660], [660, 671], [671, 682], [682, 693], [693, 704], [704, 715], [715, 726], [726, 737], [737, 748], [748, 759], [759, 770], [770, 781], [781, 792], [792, 803], [803, 814], [814, 825], [825, 836], [836, 847], [847, 858], [858, 869], [869, 880], [880, 891], [891, 902], [902, 913], [913, 924], [924, 935], [935, 946], [946, 957], [957, 968], [968, 979], [979, 990]]
//  generatePoints(listOfPoints, numOfPoints);
//eslint-disable-next-line
const ChartRandom = ({ datas, side }) => {
  //eslint-dai
  console.log(side);
  const imag = useRef();
  //const [data, setData] = useState([]);
  //const [limit, setLimit] = useState(0);
  //const [responseData, setResponseData] = useState();
  //const [xScale, setXScale] = useState(null);
  //const [yScale, setYScale] = useState(null);
  const [imageSrc, setImageSrc] = useState("");
  //const [zoomLevel, setZoomLevel] = useState(1);
  //const [toggle, setToggle] = useState(false);
  //const viewBoxOut = `0 0 ${400 * zoomLevel} ${400 * zoomLevel}`;

  useEffect(() => {
    fetch("https://100022.pythonanywhere.com/graph/", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        side: parseInt(side),
        listOfPoints: datas,
      }),
    })
      .then((response) => response.json())
      .then((data) => {
        // Handle the response data here
        // console.log(data.graph);
        //eslint-disable-next-line
        setImageSrc(data.graph);
        // setResponseData(data.graph);
      })
      .catch((error) => {
        // Handle any errors that occurred during the request
        console.error(error);
      }),
      [];
  });

  return (
    <div className="mx-auto py-6">
      <TransformWrapper
        initialScale={1}
        initialPositionX={400}
        initialPositionY={100}
      >
        {({ zoomIn, zoomOut, resetTransform }) => (
          <React.Fragment>
            {imageSrc && (
              <div
                style={{
                  display: "flex",
                  gap: "2pc",
                  justifyContent: "center",
                }}
              >
                <button onClick={() => zoomIn()}>+</button>
                <button onClick={() => zoomOut()}>-</button>
                <button onClick={() => resetTransform()}>x</button>
                {/* <p>{data[0]}</p> */}
              </div>
            )}

            <TransformComponent>
              {imageSrc && <img src={imageSrc} ref={imag} alt="Converted" />}
            </TransformComponent>
          </React.Fragment>
        )}
      </TransformWrapper>
    </div>
  );
};

export default ChartRandom;
